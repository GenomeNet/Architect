% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/preloadedGenerator.R
\name{preloadedGenerator}
\alias{preloadedGenerator}
\alias{preloadPLG}
\alias{readPLG}
\title{Create a preloaded Generator Directly}
\usage{
preloadedGenerator(
  gen,
  loadsteps,
  batchsize,
  numbatches,
  reverseComplementEncoding = FALSE
)

preloadPLG(gen, loadsteps, file)

readPLG(file, batchsize, numbatches, reverseComplementEncoding)
}
\arguments{
\item{gen}{(`function`)\cr
[`deepG`][deepG::deepG-package] generator from which to extract samples.}

\item{loadsteps}{(integer `numeric(1)`)\cr
Number of times to call `gen` to create samples.}

\item{batchsize}{(integer `numeric(1)`)\cr
Batch size of the resulting generator. This can be different from the
batch size of `gen`.}

\item{numbatches}{(integer `numeric(1)`)\cr
Number of batches to return before which to start from the beginning.
`numbatches * batchsize` must be smaller or equal to the batchsize of
`gen` times `loadsteps`, otherwise not sufficient data is present.}

\item{reverseComplementEncoding}{(`logical(1)`)\cr
Whether to create reverse complement encoded batches.
Reverse complement encoding should be switched off for `gen`. Instead,
`reverseComplementEncoding` of `preloadedGenerator()` / `readPLG()`
should be used.}

\item{file}{(`character(1)`)\cr
Path of `.rds`-file to use to store data.}
}
\value{
A generator `function` or `NULL` (in the case of `preloadPLG()`).
}
\description{
Preloaded generators read inputs through a [`deepG`][deepG::deepG-package]
generator and store the resulting data (on disk, or in memory). They can
then be used to train models, or as validation data, without needing to use
(slow) `deepG` generators. This has an added benefit for validation
generators, which become deterministic if `numbatches` equals the number of
validation batches.

`preloadPLG()` calls the generator `gen` multiple times and saves the result
as `file`. This file is then used by `readPLG()`, which creates a generator.

`preloadPLG()` creates a generator directly from the given generator `gen`;
this is equivalent to calling `preloadPLG()`, followed by `readPLG()` on the
same file, but keeps the data in memory instead of saving it to a file.
}
