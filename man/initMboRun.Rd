% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mbocall.R
\name{initMboRun}
\alias{initMboRun}
\alias{evaluateMboRun}
\title{Initialize MBO by evaluating the initial design}
\usage{
initMboRun(
  save.file.path,
  maxlen,
  residual_block,
  type,
  fidelity,
  getEpochsDesired,
  path,
  path.val,
  labels,
  plgpath,
  outputdir,
  parallel = 1,
  testrun = FALSE
)

evaluateMboRun(save.file.path, fidelity, parallel = 1)
}
\arguments{
\item{save.file.path}{(`character(1)`)\cr
Path of the MBO save file. Will not be overwritten if it exists, instead
the call will fail.}

\item{maxlen}{(integer `numeric(1)`)\cr
Sequence length.}

\item{residual_block}{(`numeric(1)`)\cr
Must be eiter 0 or 1, indicating whether to use residual block or not.}

\item{type}{(`character(1)`)\cr
Type of network to use. One of `"gap"` or `"recurrent"`.}

\item{fidelity}{(`data.table`)\cr
`data.table` with columns `walltimehrs` and `iters`, indicating the
value, in hours, to set for `walltime` after `iters`
optimization iterations were performed. The initial design is not counted
here.}

\item{getEpochsDesired}{(`function`)\cr
A `function` that maps a `numeric(1)`, indicating walltime in number of seconds, to an integer
valued `numeric(1)`, indicating the number of epochs that should approximately be evaluated.}

\item{path}{(`character(1)`)\cr
Training data path.}

\item{path.val}{(`character(1)`)\cr
Validation data path.}

\item{labels}{(`character`)\cr
Class labels.}

\item{plgpath}{(`character(1)`)\cr
Path of a preloaded generator that is read with [`readPLG()`].}

\item{outputdir}{(`character(1)`)\cr
Output directory. The tensorboard output is put in the `tensorboard_opt/` subdirectory of this.}

\item{parallel}{(integer `numeric(1)`)\cr
Parallelization: number of points to propose each iteration for multi-point proposal.}

\item{testrun}{(`logical(1)`)\cr
Whether to perform a testrun with an objective function that does not use the GPU and has fewer hyperparameters.}
}
\value{
An `OptProblem` created by `mlrMBO:::initOptProblem`
}
\description{
`initMboRun()` creates an `mlrMBO` `OptProblem` that optimizes the hyperparameters of the model created by `create_model_genomenet()`.
The default surrogate model is slightly modified to make it more robust to constant feature values, and to use epistemic uncertainty
exclusively, instead of the default epistemic + aleatoric uncertainty.


Initial design size is 4% larger than the default, which would be 2 * number
of hyperparameters, to account for an approximately 5% failure rate from the
start.

After the initial design, multiple points are proposed to make use of available parallelization.

`evaluateMboRun()` runs in an endless loop; to end optimization, the R process needs to be interrupted.
}
